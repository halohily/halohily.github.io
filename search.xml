<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Mac OS轻应用推荐之 一键翻墙的 『Lantern』]]></title>
      <url>%2F2017%2F02%2F12%2FMac%20OS%E8%BD%BB%E5%BA%94%E7%94%A8%E6%8E%A8%E8%8D%90%E4%B9%8B%20%E4%B8%80%E9%94%AE%E7%BF%BB%E5%A2%99%E7%9A%84%20%E3%80%8ELantern%E3%80%8F%2F</url>
      <content type="text"><![CDATA[工作或学习时，我们偶尔需要访问被封锁的Google，YouTube等网站。这次为大家推荐一款优秀的一键翻墙软件 ——— Lantern。 简介 Lantern是一款免费的开源软件，它可以帮助我们快速、安全地访问互联网中被封锁的网站。 它的官方网站是 Lantern，目前已被封锁。 刚刚已经说过，它是一款开源软件，相关项目代码已开源在Github中，这里是Github项目地址。 下载 目前最为可靠安全的下载方式为作者在Github中提供的下载地址，包括各个平台的各个版本，这里是官方提供的版本。推荐大家使用这种方式进行下载。这里是下载地址。 使用 下载安装后，打开软件即会在浏览器中弹出以下界面提示你翻墙成功，可以开始尽情访问自己需要的页面了。 原理及安全性 Lantern 让用户能流畅地访问被封锁的互联网站点。Lantern 自动检测一个网站是否被封锁。对那些被封锁的网站，Lantern 通过自有的服务器或者未封锁地区的用户运行的 Lantern 来提供访问。如果网站没有被封锁，Lantern 选择靠边站。这样浏览器就会直接访问网站，而速度不受影响。 Lantern 全程加密被封锁的网站，但如果网站没被封锁，Lantern 不会对其做任何改动。这意味着一个网络上的窥探者，比如政府的审查部门或者 ISP，没办法看到你访问被封锁网站时的具体内容。那些提供访问点的 Lantern 用户能看到你访问的网站，以及你来自哪里。但他们也看不到具体的内容，因为内容是经过HTTPS加密的。Lantern 只给那些提供访问的 Lantern 用户发送 HTTPS加密的内容。 最后，恳请大家在浏览墙外内容的时候，能够保持审视理智的态度~。 Halo]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Mac OS轻应用推荐系列引言]]></title>
      <url>%2F2017%2F02%2F12%2FMac%20OS%E8%BD%BB%E5%BA%94%E7%94%A8%E6%8E%A8%E8%8D%90%E7%B3%BB%E5%88%97%E5%BC%95%E8%A8%80%2F</url>
      <content type="text"><![CDATA[使用MacBook两年多以来，被推荐或自己发现了一些 Mac OS系统中比较实用或有趣的应用。一直想做一个整理记录，并且分享出来。这个系列就是出于这个目的。我会将使用过的一些优秀应用进行介绍和简单分析。未来遇到的优秀应用我也会在这里持续更新。 在这里『轻应用』的含义是指轻便、易用，类似于浏览器中『插件』的概念，更多的是工具类的应用。所以，开发环境、图形处理等大型软件不在此列。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[iOS之路之『懒加载』]]></title>
      <url>%2F2017%2F02%2F11%2FiOS%E4%B9%8B%E8%B7%AF%E4%B9%8B%E3%80%8E%E6%87%92%E5%8A%A0%E8%BD%BD%E3%80%8F%2F</url>
      <content type="text"><![CDATA[本篇是自己的首篇技术类文章，来谈一谈非常实用的懒加载技术。 首先感谢简书的 @维尼的小熊，他的许多技术文章对我的iOS学习提供了非常大的帮助。 懒加载的定义：延时加载，即当对象需要用到的时候再去加载。其实就是重写对象的get方法,当系统或者开发者调用对象的get方法时，再去加载对象。需要注意：重写get方法时，先判断对象当前是否为空，为空的话再去实例化对象 懒加载的优点: 不需将对象的实例化写到viewDidLoad，可以简化代码，增强代码的可读性 对象的实例化在get方法中，各司其职，降低耦合性 对系统的内存占用率会减小 viewDidLoad正常加载代码示例没用懒加载的时候，从plist获取数据，返回一个数组，需要写在viewDidLoad方法中获取 1234567891011121314151617@interface ViewController ()@property (nonatomic, strong) NSArray *shopData;@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; _shopData = [NSArray arrayWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@&quot;shop&quot; ofType:@&quot;plist&quot;]];&#125;@end 显而易见，当控制器被加载完成后就会加载当前的shopData，假如shopData是在某些事件被触发的时候才会被调用，没必要在控制器加载完就去获取plist文件，如果事件不被触发，代表着shopData永远不会被用到，这样在viewDidLoad中加载shopData就会十分多余，并且耗用内存 懒加载代码示例123456789101112131415- (void)viewDidLoad &#123; [super viewDidLoad];&#125;- (NSArray *)shopData&#123; if (!_shopData) &#123; _shopData = [NSArray arrayWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@&quot;shop&quot; ofType:@&quot;plist&quot;]]; &#125; return _shopData;&#125;@end 当需要用到shopData的时候，就会调用[self shopData]的方法（即get方法），此时系统会去调用get方法，然后再get方法中获取plist文件内容，然后返回使用。 需要注意在get方法里切勿使用self.shopData，因为在这里使用self.shopData会造成死循环。这里涉及到了Objective-C的点语法。self.shopData是方法调用，相当于[self shopData]，也即调用了自身。在Objective-C中，点方法放等号右边就是调用getter，放左边就是调用setter。 总结：懒加载即用到时方去加载对象]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[自己写博客文章的几点规范]]></title>
      <url>%2F2017%2F02%2F11%2F%E8%87%AA%E5%B7%B1%E5%86%99%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E7%9A%84%E5%87%A0%E7%82%B9%E8%A7%84%E8%8C%83%2F</url>
      <content type="text"><![CDATA[在md文件起始位置添加正确的标签、分类信息备注12345678910示例---title: # 文章的标题 categories: # 文章的分类 - 杂谈tags: # 这里写的标签会自动汇集到 tags 页面上- 手机- 杂谈- 锤子科技--- 写技术类文章时，段首不缩进。写杂谈、评论等文章时，段首严格缩进。缩进方式：『全角』输入模式下，输入两个空格。 全角切换方式：Shift+ Space tips类语句，短句采用『引用代码』形式，多行采用『引用』形式。 借鉴学习类的博文，在文首正确@原作者表示感谢。 在文章合适的位置对文章进行截断。截断方式：&lt;!-- more --&gt; Halo 2017 2.11]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[关于罗永浩、关于崇拜偶像]]></title>
      <url>%2F2017%2F02%2F09%2F%E5%85%B3%E4%BA%8E%E7%BD%97%E6%B0%B8%E6%B5%A9%E3%80%81%E5%85%B3%E4%BA%8E%E5%B4%87%E6%8B%9C%E5%81%B6%E5%83%8F%2F</url>
      <content type="text"><![CDATA[为什么想写这一篇 一直以来我都是一个锤粉，是一个罗粉，欣赏老罗的气质、锤子科技的气质，喜欢听老罗的“相声专场”。知乎有很多锤黑，总是贬低着老罗、看衰锤子。以前总是觉得这些无脑黑的人必然水军无误。然而，最近看到了一些老罗负面的记录，说实话，有些讶异，这让我对老罗无比欣赏的态度有了一些改变。也进一步引发了对于崇拜、对于偶像的一些想法。 关于罗永浩、关于崇拜偶像 罗永浩，曾经的新东方明星英文教师，曾创办牛博网。在大多数人质疑、看衰的情况下进军手机制造业，创办锤子科技。在经历了几年的艰难奋斗，最近发布了Smartisan M1系列手机，引发广泛关注。 每个互联网社区都有自己的社区文化。在知乎，“黑老罗”就是这里的文化之一。我记得第一次听到罗永浩这个名字，就是在知乎的一个问题下。那是一个客观讨论罗永浩的问题，下面的答案几乎压倒性的黑他。我好奇，是什么样的一个人会让这么多人都热衷于踩一脚。去百度了一番老罗的履历，感觉这是一个很传奇的人，也仅此而已。可能是被知乎影响吧，最初我对于老罗和他的锤子科技也仅仅是略微了解，同时，抱着不看好的态度。后来闲着无聊在极速上下载锤子的发布会视频，看着看着开始觉得老罗起码是一个有趣的人，饶有兴趣的看完了。之后又下载并且比较认真地看了其他场的发布会。在看的过程中，对锤子科技也有了更进一步的了解。老罗和锤子所宣扬的工匠精神、完美主义、易用主义，噱头也好，情怀也罢，总之就是让我产生了好感，吸引了我去认真了解它的设计、它的Smartisan OS。客观来说，这家企业改变了我对国产手机、国产手机操作系统的认识。然后关注了老罗的微博，开始关注锤子的新闻。老罗所表现出来的性格，所说的话，是很正能量的，宣扬的价值观也能让我认同，慢慢开始了锤粉、罗粉之路。然后锤子在北展剧场开的坚果手机文青版发布会我也和勋哥一起去了现场参加。 迈入粉丝阵营后，再回看知乎上铺天盖地黑老罗的回答，总觉得这些人很无聊，不喜欢是自由，为何要不遗余力地黑呢。也曾给一连串的回答点过反对+没有帮助。我继续听着老罗说相声，看着老罗发微博，然后鄙夷着那些变着花样黑罗的人。 然而，最近看到一篇干货满满的黑罗文章，我承认我有些震惊了。PO主记录了一系列老罗成名早期的言论，直白一点就是，那时候的老罗是一个十足的愤青，而且言语中尽是鄙夷中国的种种言论，近乎无脑地吹捧日本。而且作为公众人物，诸如此类的言论频频在微博上发表。可以说，这样的人在我的意识中一直是被定义为“脑残”的。发现自己崇拜的偶像、欣赏的前辈竟然是自己所鄙夷的那一类人，让我想起了之前知乎一位罗黑讲过的话：“有一种罗黑群体，他们是最早认识罗永浩的那一批人。”是啊，想想看，如果我是在那个时候认识的老罗，我也是确定无疑地会鄙夷反感这个人的吧。 回头看看自己崇拜的老罗，他的演讲堪称风趣风格的教科书级，他在工业设计上强调的工匠精神、精雕细琢，他在硬件、系统中推崇的完美主义、易用主义，他尊重知识产权，他支持开源世界，他身体力行地带着锤子科技改变了这个行业的一些风气，这些都是真实存在的。 再看看他曾经的一系列言论，那些也是真真切切被很多人看在眼里的。也许他已经慢慢改变了想法，不再是那个无脑的愤青喷子，又或许他只是现在作为企业家收敛了自己那些会带来负面效应的作为。其实我更相信后者，因为我不太相信一个中年人的三观会在几年内发生巨大改变。“脑残”的老罗，这也是真实的老罗。 说实话，我一直潜意识地认为老罗在其他方面也是同样美好同样堪称偶像，他热爱着手机行业，我就推断了他也热爱着自己的祖国。这听起来可笑，但它确实在我把老罗当做偶像时在脑海中发生了。我不禁开始想，我们对于偶像的崇拜，到底该持什么样的态度。到目前为止，我还确信，我一直喜欢的老罗的那些特质，都依然真实存在且值得推崇，在这些方面他依然是值得尊重的前辈。但是到了社会观的讨论上，他已经是一个我鄙夷厌恶的对象。这些冲突吗？也许冲突，因为这些让我无法再把他摆在偶像的位置上。但又不冲突，因为我欣赏他在手机行业的成就时无关于对三观的讨论。 归于一句话，我认为对于偶像的崇拜，不必强求他方方面面都值得学习。与此同时，一个人有令你惊叹的一面，不代表他方方面面都同样光芒四射。 所以，当你听说小A的偶像是林丹时，你不能因为林丹出轨就推断小A会对感情不忠，因为小A崇拜的只是林丹打球时的气概。]]></content>
    </entry>

    
  
  
</search>
